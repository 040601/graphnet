# This is a simple workflow to run data/icetray specific unit tests
name: build-icetray

# Controls when the workflow will run
on:
  # Triggers the workflow on push and PRs
  push:
    paths-ignore: [ assets/badges/ ]
  pull_request_target:
    branches: [ main ]
    paths-ignore: [ assets/badges/ ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-icetray:
    runs-on: ubuntu-latest
    container: icecube/icetray:combo-stable
    steps:
      - name: Install git
        run: |
          apt-get update
          apt-get install -y git>=2.25
      - name: Debug
        run: |
          git --version
      - uses: actions/checkout@v2
      - name: Install dependencies
        uses: ./.github/actions/install-torch-cpu
      - name: Install package
        run: |
          pip install .[develop]
      - name: Create folder for test data
        run: |
          mkdir -p $TEST_DATA_DIR
          echo "TEST_DATA_DIR=${TEST_DATA_DIR}" >> $GITHUB_ENV
        env:
          TEST_DATA_DIR: ./test_data/
      - name: Retrieve test data
        run: |
          apt-get install sshpass
          sshpass -p "$PASSWORD" scp -o StrictHostKeyChecking=no $USERNAME@$HOST:$SOURCE $TEST_DATA_DIR
        env:
          HOST: ${{ secrets.PUB_WISC_HOST }}
          USERNAME: ${{ secrets.PUB_WISC_USERNAME }}
          PASSWORD: ${{ secrets.PUB_WISC_PASSWORD }}
          SOURCE: "graphnet/data/test/*.i3.*"
      - name: Check data
        run: |
          ls -l $TEST_DATA
          MD5CHECK="$(find $TEST_DATA -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -d" " -f1)"
          #if [[ "$MD5CHECK" == "$MD5HASH" ]]; then echo "Checksums agree"; else exit 1; fi
        env:
          MD5HASH: 7efbc933c39a44efa8cf7ed983030b1e
      - name: Run unit tests and generate coverage report
        run: |
          coverage run --source=graphnet -m pytest tests/ > results_pytest.txt
          cat results_pytest.txt
          coverage report -m | tee results_coverage.txt
      - name: Generate unit test/build and coverage badges
        run: |
          tail -1 results_coverage.txt | sed 's/.* \(.*\)%/\1/g' | xargs -I {} anybadge -f coverage.svg -v {} coverage
          mkdir -p assets/badges/
          mv coverage.svg assets/badges/
      - name: Configure git
        run: |
          ls -lart
          git config user.email "andreas.sogaard@gmail.com"
          git config user.name "Andreas SÃ¸gaard"
          git status
      - name: Stage badges
        run: |
          git add -f assets/badges/
      - name: Commit and push changes
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git commit -m "Auto-updating coverage badge" > /dev/null && git push origin ${GITHUB_REF##*/} || echo "Nothing to push"
