# This is a simple workflow to run unit tests and code coverage, and display resulting badges
name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push and PRs
  push:
    paths-ignore: [ assets/badges/ ]
  pull_request_target:
    branches: [ main ]
    paths-ignore: [ assets/badges/ ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        uses: ./.github/actions/install-torch-cpu
      - name: Install package
        run: |
          pip install .[develop]
      - name: Create folder for test data
        run: |
          mkdir -p $TEST_DATA_DIR
          echo "TEST_DATA_DIR=${TEST_DATA_DIR}" >> $GITHUB_ENV
        env:
          TEST_DATA_DIR: ./test_data/
      - name: Retrieve test data
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUB_WISC_HOST }}
          username: ${{ secrets.PUB_WISC_USERNAME }}
          password: ${{ secrets.PUB_WISC_PASSWORD }}
          source: "graphnet/data/test/*.i3.*"
          target: "$TEST_DATA"
      - name: Run unit tests and generate coverage report
        run: |
          set -o pipefail  # To propagate exit code from pytest
          coverage run --source=graphnet -m pytest tests/ | tee results_pytest.txt
          coverage report -m | tee results_coverage.txt
      - name: Generate unit test/build and coverage badges
        run: |
          tail -1 results_coverage.txt | sed 's/.* \(.*\)%/\1/g' | xargs -I {} anybadge -f coverage.svg -v {} coverage
          mkdir -p assets/badges/
          mv coverage.svg assets/badges/
      - name: Configure git
        run: |
          git config user.email "andreas.sogaard@gmail.com"
          git config user.name "Andreas SÃ¸gaard"
          git status
      - name: Stage badges
        run: |
          git add -f assets/badges/
      - name: Commit and push changes
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git commit -m "Auto-updating coverage badge" > /dev/null && git push origin ${GITHUB_REF##*/} || echo "Nothing to push"
